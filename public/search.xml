<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>重回基础之HTTP协议笔记系列（一）：HTTP协议与其相关的概念</title>
    <url>/keepmoving/2020/04/19/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BHTTP%E5%8D%8F%E8%AE%AE%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHTTP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%85%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>重回基础之MySQL笔记系列（三）：字符集与比较规则</title>
    <url>/keepmoving/2020/04/18/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>重回基础系列之MySQL系列主要是基于对 <strong>极客时间的《mysql实战45讲》课程和掘金的《从根上理解mysql》小册子</strong>的笔记整理，文章内容中或多或少会添加自己的理解，仅仅是对自己知识体系的重新认识与巩固，为避免遗忘，故记之。</p>
</blockquote>
<a id="more"></a>

<h2 id="字符集与比较规则"><a href="#字符集与比较规则" class="headerlink" title="字符集与比较规则"></a>字符集与比较规则</h2><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>计算机通过建立字符与二进制的映射关系来存储字符串，而字符集就是描述<strong>某个字符范围内的编码规则</strong>。（定义了字符的范围与映射规则）</p>
<img src="/keepmoving/2020/04/18/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/1587307096905.jpg" class="" title="编码与解码">

<h4 id="常用的字符集"><a href="#常用的字符集" class="headerlink" title="常用的字符集"></a>常用的字符集</h4><ul>
<li><code>ASCII</code>字符集</li>
</ul>
<p>共收录128个字符，包括空格、标点符号、数字、大小写字母和一些不可见字符。由于总共才128个字符，所以可以使用1个字节来进行编码，我们看一些字符的编码方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;L&#39; -&gt;  01001100（十六进制：0x4C，十进制：76）</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#39;M&#39; -&gt;  01001101（十六进制：0x4D，十进制：77）</span></pre></td></tr></table></figure>

<ul>
<li><code>ISO 8859-1</code>字符集</li>
</ul>
<p>共收录256个字符，是在<code>ASCII</code>字符集的基础上又扩充了128个西欧常用字符(包括德法两国的字母)，也可以使用1个字节来进行编码。这个字符集也有一个别名<code>latin1</code>。</p>
<ul>
<li><code>GB2312</code>字符集</li>
</ul>
<p>收录了汉字以及拉丁字母、希腊字母、日文平假名及片假名字母、俄语西里尔字母。其中收录汉字6763个，其他文字符号682个。同时这种字符集又兼容<code>ASCII</code>字符集，所以在编码方式上显得有些奇怪：</p>
<ul>
<li>如果该字符在<code>ASCII</code>字符集中，则采用1字节编码。</li>
<li>否则采用2字节编码。</li>
</ul>
<p>这种表示一个字符需要的字节数可能不同的编码方式称为<code>变长编码方式</code>。比方说字符串<code>&#39;爱u&#39;</code>，其中<code>&#39;爱&#39;</code>需要用2个字节进行编码，编码后的十六进制表示为<code>0xB0AE</code>，<code>&#39;u&#39;</code>需要用1个字节进行编码，编码后的十六进制表示为<code>0x75</code>，所以拼合起来就是<code>0xB0AE75</code>。</p>
<ul>
<li><code>GBK</code>字符集</li>
</ul>
<p><code>GBK</code>字符集只是在收录字符范围上对<code>GB2312</code>字符集作了扩充，编码方式上兼容<code>GB2312</code>。</p>
<ul>
<li><code>utf8</code>字符集</li>
</ul>
<p>收录地球上能想到的所有字符，而且还在不断扩充。这种字符集兼容<code>ASCII</code>字符集，采用变长编码方式，编码一个字符需要使用1～4个字节，比方说这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;L&#39; -&gt;  01001100（十六进制：0x4C）</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#39;啊&#39; -&gt;  111001011001010110001010（十六进制：0xE5958A）</span></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<p>utf8只是Unicode字符集的一种编码方案，Unicode字符集可以采用utf8、utf16、utf32这几种编码方案，utf8使用1～4个字节编码一个字符，utf16使用2个或4个字节编码一个字符，utf32使用4个字节编码一个字符。</p>
</blockquote>
<h3 id="比较规则"><a href="#比较规则" class="headerlink" title="比较规则"></a>比较规则</h3><p>如何比较两个字符的大小？最简单的方式是通过二进制大小来比较，但英文字母大小写本质上是相同的若通过二进制大小比较则不合适，故可先同转大写或小写再比较。<strong>同一种字符集可以有多种比较规则。</strong></p>
<blockquote>
<p>比较规则的作用通常体现比较字符串大小的表达式以及对某个字符串列进行排序中。</p>
</blockquote>
<h2 id="MySQL中支持的字符集比较规则"><a href="#MySQL中支持的字符集比较规则" class="headerlink" title="MySQL中支持的字符集比较规则"></a>MySQL中支持的字符集比较规则</h2><h3 id="MySQL中的utf8和utf8mb4"><a href="#MySQL中的utf8和utf8mb4" class="headerlink" title="MySQL中的utf8和utf8mb4"></a>MySQL中的utf8和utf8mb4</h3><p><code>MySQL</code>中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，故mysql的设计者在utf8上又划分了2个概念：</p>
<ul>
<li><code>utf8mb3（utf8）</code>：阉割过的<code>utf8</code>字符集，只使用1～3个字节表示字符。</li>
<li><code>utf8mb4</code>：正宗的<code>utf8</code>字符集，使用1～4个字节表示字符。</li>
</ul>
<blockquote>
<p>常用的字符使用1～3个字节就可以表示使用utf8，但比如存储一些emoji的表情，就要使用utf8mb4。</p>
</blockquote>
<p>字符集的查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW (CHARACTER SET|CHARSET) [LIKE 匹配的模式];</span></pre></td></tr></table></figure>

<p>比较规则的查看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW COLLATION [LIKE 匹配的模式];</span></pre></td></tr></table></figure>

<h3 id="字符集和比较规则的应用"><a href="#字符集和比较规则的应用" class="headerlink" title="字符集和比较规则的应用"></a>字符集和比较规则的应用</h3><h4 id="各级别的字符集和比较规则"><a href="#各级别的字符集和比较规则" class="headerlink" title="各级别的字符集和比较规则"></a>各级别的字符集和比较规则</h4><p><code>MySQL</code>有4个级别的字符集和比较规则（若未指定，则跟随上一级），分别是：</p>
<ul>
<li>服务器级别(启动或运行)</li>
</ul>
<p><code>MySQL</code>提供了两个系统变量来表示服务器级别的字符集和比较规则：<code>character_set_server</code></p>
<p>和 <code>collation_server</code></p>
<ul>
<li>数据库级别(建数据库或修改时)</li>
</ul>
<p>系统变量为：<code>character_set_database</code> 和 <code>collation_database</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] CHARACTER SET 字符集名称]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] COLLATE 比较规则名称];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ALTER DATABASE 数据库名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] CHARACTER SET 字符集名称]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] COLLATE 比较规则名称];</span></pre></td></tr></table></figure>

<p>注意：<strong><em>character_set_database</em></strong> 和 <strong><em>collation_database</em></strong> 这两个系统变量是只读的，我们不能通过修改这两个变量的值而改变当前数据库的字符集和比较规则。</p>
<ul>
<li>表级别(建表或修改时)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名 (列的信息)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] CHARACTER SET 字符集名称]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [COLLATE 比较规则名称]]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ALTER TABLE 表名</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [[DEFAULT] CHARACTER SET 字符集名称]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    [COLLATE 比较规则名称]</span></pre></td></tr></table></figure>

<ul>
<li>列级别（建列或修改时）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE 表名(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    其他列...</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 MODIFY 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称];</span></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<blockquote>
<p>字符集和比较规则是互相有联系的，故：</p>
<ul>
<li>只修改字符集，则比较规则将变为修改后的字符集默认的比较规则。</li>
<li>只修改比较规则，则字符集将变为修改后的比较规则对应的字符集。</li>
</ul>
</blockquote>
<h2 id="客户端和服务器通信中的字符集"><a href="#客户端和服务器通信中的字符集" class="headerlink" title="客户端和服务器通信中的字符集"></a>客户端和服务器通信中的字符集</h2><p>若客户端与服务器之间使用的字符集不一致，就会导致乱码的产生。比如客户端使用utf8进行编码，服务器使用ascii进行解码，这样就会导致服务器产生乱码。</p>
<h4 id="MySQL中字符集的转换"><a href="#MySQL中字符集的转换" class="headerlink" title="MySQL中字符集的转换"></a>MySQL中字符集的转换</h4><p>将收到的字符串进行a字符集进行解码，然后再使用b字符集进行编码，这个过程称之为 <strong>字符集的转换</strong>。</p>
<p>客户端与服务器中间的传输本质上是字符串（某种字符集编码的二进制数据），从发送请求到返回结果这个过程中伴随着多次字符集的转换，在这个过程中会用到3个系统变量。</p>
<table>
<thead>
<tr>
<th>系统变量</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>character_set_client</td>
<td>服务器解码请求时使用的字符集</td>
</tr>
<tr>
<td>character_set_connection</td>
<td>服务器处理请求时会把请求字符串从<code>characer_set_client</code>转为<code>character_set_connection</code></td>
</tr>
<tr>
<td>character_set_results</td>
<td>服务器向客户端返回数据时使用的字符集</td>
</tr>
</tbody></table>
<p>为了避免无谓的字符转换，通常都把 <strong><em>character_set_client</em></strong> 、<strong><em>character_set_connection</em></strong>、<strong><em>character_set_results</em></strong> 这三个系统变量设置成和客户端使用的字符集一致。MySQL提供了一条非常简便的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES 字符集名; # 等同于同时设置上述3个变量</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>back to basics</tag>
      </tags>
  </entry>
  <entry>
    <title>重回基础之MySQL系列（二）：MySQL的启动选项和系统变量</title>
    <url>/keepmoving/2020/04/14/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AMySQL%E7%9A%84%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>重回基础系列之MySQL系列主要是基于对 <strong>极客时间的《mysql实战45讲》课程和掘金的《从根上理解mysql》小册子</strong>的笔记整理，文章内容中或多或少会添加自己的理解，仅仅是对自己知识体系的重新认识与巩固，为避免遗忘，故记之。</p>
</blockquote>
<a id="more"></a>

<h2 id="启动选项和配置文件"><a href="#启动选项和配置文件" class="headerlink" title="启动选项和配置文件"></a>启动选项和配置文件</h2><p>对于<code>MySQL</code>服务器程序，我们可以指定诸如允许同时连入的客户端数量、客户端和服务器通信方式、表的默认存储引擎、查询缓存的大小等等设置；<code>MySQL</code>客户端程序，可以指定需要连接的服务器程序所在主机的主机名或IP地址、用户名及密码等信息。</p>
<p>启动 <code>MySQL</code>程序时可指定启动参数，启动参数可放在命令行或配置文件。</p>
<h3 id="在命令行上使用选项（仅对当次启动有效）"><a href="#在命令行上使用选项（仅对当次启动有效）" class="headerlink" title="在命令行上使用选项（仅对当次启动有效）"></a>在命令行上使用选项（仅对当次启动有效）</h3><p>在命令行中指定启动选项时需要在选项名前加上<code>--</code>前缀。另外，如果选项名是由多个单词构成的，它们之间可以由短划线<code>-</code>连接起来，也可以使用下划线<code>_</code>连接起来，也就是说<code>skip-networking</code>和<code>skip_networking</code>表示的含义是相同的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --skip-networking #禁止各客户端使用TCP&#x2F;IP网络进行通信</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysqld --default-storage-engine&#x3D;MyISAM #指定表的存储引擎</span></pre></td></tr></table></figure>

<p>故通用格式为：(<strong>选项名、=、选项值之间不可以有空白字符</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--启动选项1[&#x3D;值1] --启动选项2[&#x3D;值2] ... --启动选项n[&#x3D;值n]</span></pre></td></tr></table></figure>

<p>可通过<code>--help</code>选项查看程序支持的所有启动选项以及它们的默认值。(查看<code>mysqld</code>支持的启动选项有些特别，需要使用<code>mysqld --verbose --help</code>)</p>
<h4 id="选项的长形式和短形式"><a href="#选项的长形式和短形式" class="headerlink" title="选项的长形式和短形式"></a>选项的长形式和短形式</h4><table>
<thead>
<tr>
<th>长形式</th>
<th>短形式</th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody><tr>
<td>–host</td>
<td>-h</td>
<td>主机名</td>
</tr>
<tr>
<td>–user</td>
<td>-u</td>
<td>用户名</td>
</tr>
<tr>
<td>–password</td>
<td>-p</td>
<td>密码</td>
</tr>
<tr>
<td>–port</td>
<td>-P</td>
<td>端口</td>
</tr>
<tr>
<td>–version</td>
<td>-V</td>
<td>版本信息</td>
</tr>
</tbody></table>
<p>短形式只需要一个 <code>-</code>即可。</p>
<h3 id="配置文件中使用选项"><a href="#配置文件中使用选项" class="headerlink" title="配置文件中使用选项"></a>配置文件中使用选项</h3><p>把需要设置的启动选项都写在这个配置文件中，每次启动服务器的时候都从这个文件里加载相应的启动选项。</p>
<h4 id="配置文件的路径"><a href="#配置文件的路径" class="headerlink" title="配置文件的路径"></a>配置文件的路径</h4><p><code>MySQL</code>程序在启动时会寻找多个路径下的配置文件，这些路径有的是固定的，有的是可以在命令行指定的。</p>
<p>在类<code>UNIX</code>操作系统中，<code>MySQL</code>会按照下列路径来寻找配置文件：</p>
<table>
<thead>
<tr>
<th>路径名</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>/etc/my.cnf</td>
<td></td>
</tr>
<tr>
<td>/etc/mysql/my.cnf</td>
<td></td>
</tr>
<tr>
<td>SYSCONFDIR/my.cnf</td>
<td></td>
</tr>
<tr>
<td>$MYSQL_HOME/my.cnf</td>
<td>特定于服务器的选项（仅限服务器）</td>
</tr>
<tr>
<td>defaults-extra-file</td>
<td>命令行指定的额外配置文件路径</td>
</tr>
<tr>
<td>~/.my.cnf</td>
<td>用户特定选项</td>
</tr>
<tr>
<td>~/.mylogin.cnf</td>
<td>用户特定的登录路径选项（仅限客户端）</td>
</tr>
</tbody></table>
<ul>
<li><code>MYSQL_HOME</code>是一个环境变量，该变量的值是我们自己设置的，表示一个路径，该路径下创建一个<code>my.cnf</code>配置文件，那么这个配置文件中只能放置关于启动服务器程序相关的选项。</li>
<li>两个以<code>~</code>开头的路径是用户相关的，类<code>UNIX</code> 系统中都有一个当前登陆用户的概念，每个用户都可以有一个用户目录，<code>~</code>就代表这个用户目录，不同的类<code>UNIX</code>系统的用户都可以在自己的用户目录下创建<code>.my.cnf</code>或者<code>.mylogin.cnf</code>，换句话说，不同登录用户使用的<code>.my.cnf</code>或者<code>.mylogin.cnf</code>配置文件是不同的。</li>
</ul>
<h4 id="配置文件的内容"><a href="#配置文件的内容" class="headerlink" title="配置文件的内容"></a>配置文件的内容</h4><p>配置文件中的启动选项被划分为若干个组，每个组有一个组名，用中括号<code>[]</code>扩起来。</p>
<p><strong>配置文件中只能使用长形式的选项，每行只指定一个选项，<code>=</code>周围可以有空白字符</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[server]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr><tr><td class="code"><pre><span class="line">option1     #这是option1，该选项不需要选项值</span></pre></td></tr><tr><td class="code"><pre><span class="line">option2 &#x3D; value2      #这是option2，该选项需要选项值</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[mysqld]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[mysqld_safe]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[client]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[mysql]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">[mysqladmin]</span></pre></td></tr><tr><td class="code"><pre><span class="line">(具体的启动选项...)</span></pre></td></tr></table></figure>

<ul>
<li><code>[server]</code>组下边的启动选项将作用于所有的服务器程序。</li>
<li><code>[client]</code>组下边的启动选项将作用于所有的客户端程序。</li>
</ul>
<h4 id="特定MySQL版本的专用选项组"><a href="#特定MySQL版本的专用选项组" class="headerlink" title="特定MySQL版本的专用选项组"></a>特定MySQL版本的专用选项组</h4><p>我们可以在选项组的名称后加上特定的<code>MySQL</code>版本号，比如对于<code>[mysqld]</code>选项组来说，我们可以定义一个<code>[mysqld-5.7]</code>的选项组，它的含义和<code>[mysqld]</code>一样，只不过只有版本号为<code>5.7</code>的<code>mysqld</code>程序才能使用这个选项组中的选项。</p>
<h4 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h4><p>依照上表中给定的顺序依次读取各个配置文件，如果该文件不存在则忽略。<strong>值得注意的是，如果我们在多个配置文件中设置了相同的启动选项，那以<u>最后一个配置文件</u>中的为准。</strong></p>
<h4 id="同一个配置文件中多个组的优先级"><a href="#同一个配置文件中多个组的优先级" class="headerlink" title="同一个配置文件中多个组的优先级"></a>同一个配置文件中多个组的优先级</h4><p>同一个命令可以访问配置文件中的多个组，比如<code>mysqld</code>可以访问<code>[mysqld]</code>、<code>[server]</code>组，如果在同一个配置文件中，出现了不同组的相同配置项，<strong>将以<u>最后一个出现的组</u>中的启动选项为准</strong>。</p>
<h4 id="defaults-file的使用"><a href="#defaults-file的使用" class="headerlink" title="defaults-file的使用"></a>defaults-file的使用</h4><p>该配置会导致mysql不会去默认的路径下搜索</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在程序启动的时候将只在&#x2F;tmp&#x2F;myconfig.txt路径下搜索配置文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">mysqld --defaults-file&#x3D;&#x2F;tmp&#x2F;myconfig.txt</span></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>defaults-extra-file</code>可以指定额外的配置文件搜索路径（也就是说那些固定的配置文件路径也会被搜索）。</p>
</blockquote>
<h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p><strong>如果同一个启动选项既出现在命令行中，又出现在配置文件中，那么以命令行中的启动选项为准。</strong></p>
<h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><h3 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES [LIKE 匹配的模式];</span></pre></td></tr><tr><td class="code"><pre><span class="line">#例子</span></pre></td></tr><tr><td class="code"><pre><span class="line">SHOW VARIABLES like &#39;max_connections&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#39;default%&#39;;</span></pre></td></tr></table></figure>

<h3 id="设置系统变量"><a href="#设置系统变量" class="headerlink" title="设置系统变量"></a>设置系统变量</h3><h4 id="通过启动选项设置"><a href="#通过启动选项设置" class="headerlink" title="通过启动选项设置"></a>通过启动选项设置</h4><p>对于启动选项来说，如果启动选项名由多个单词组成，各个单词之间用短划线<code>-</code>或者下划线<code>_</code>连接起来都可以，但是它对应的系统变量的单词之间必须使用下划线<code>_</code>连接起来。</p>
<h4 id="服务器程序运行过程中设置"><a href="#服务器程序运行过程中设置" class="headerlink" title="服务器程序运行过程中设置"></a>服务器程序运行过程中设置</h4><p>对于大部分系统变量来说，它们的值可以在服务器程序运行过程中进行动态修改而无需停止并重启服务器。</p>
<p>系统变量拥有作用范围的概念，分为以下两种。</p>
<ul>
<li><code>GLOBAL</code>：全局变量，影响服务器的整体操作。</li>
<li><code>SESSION</code>：会话变量，影响某个客户端连接的操作。（注：<code>SESSION</code>有个别名叫<code>LOCAL</code>）</li>
</ul>
<p><strong>注意：</strong> 并不是所有系统变量都具有<code>GLOBAL</code>和<code>SESSION</code>的作用范围。</p>
<ul>
<li>有一些系统变量只具有<code>GLOBAL</code>作用范围，比方说<code>max_connections</code>。</li>
<li>有一些系统变量只具有<code>SESSION</code>作用范围，比如<code>insert_id</code>，表示在对某个包含<code>AUTO_INCREMENT</code>列的表进行插入时，该列初始的值。</li>
<li>有一些系统变量的值既具有<code>GLOBAL</code>作用范围，也具有<code>SESSION</code>作用范围，比如我们前边用到的<code>default_storage_engine</code>。</li>
</ul>
<p>在服务器启动时，会将每个全局变量初始化为其默认值（可以通过命令行或选项文件中指定的选项更改这些默认值）。然后<strong>服务器还为每个连接的客户端维护一组会话变量</strong>，客户端的会话变量在连接时使用相应全局变量的当前值初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET [GLOBAL|SESSION] 系统变量名 &#x3D; 值;</span></pre></td></tr></table></figure>

<p>注意：</p>
<blockquote>
<p>如果在设置系统变量的语句中省略了作用范围，默认的作用范围就是<code>SESSION</code>。</p>
<p>同理，<code>SHOW VARIABLES</code>语句查看的<code>SESSION</code>作用范围的系统变量。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW [GLOBAL|SESSION] VARIABLES [LIKE 匹配的模式];</span></pre></td></tr></table></figure>

<h2 id="状态变量"><a href="#状态变量" class="headerlink" title="状态变量"></a>状态变量</h2><p><code>MySQL</code>服务器程序中维护了好多关于程序运行状态的变量，它们被称为<code>状态变量</code>。不可设置，与系统变量相似。<code>状态变量</code>也有<code>GLOBAL</code>和<code>SESSION</code>两个作用范围的，所以查看<code>状态变量</code>的语句可以这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW [GLOBAL|SESSION] STATUS [LIKE 匹配的模式]; #默认session</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>back to basics</tag>
      </tags>
  </entry>
  <entry>
    <title>重回基础之MySQL系列（一）：MySQL的运行方式</title>
    <url>/keepmoving/2020/04/14/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AMySQL%E7%9A%84%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>重回基础系列之MySQL系列主要是基于对 <strong>极客时间的《mysql实战45讲》课程和掘金的《从根上理解mysql》小册子</strong>的笔记整理，文章内容中或多或少会添加自己的理解，仅仅是对自己知识体系的重新认识与巩固，为避免遗忘，故记之。</p>
</blockquote>
<a id="more"></a>

<h2 id="MySQL的架构"><a href="#MySQL的架构" class="headerlink" title="MySQL的架构"></a>MySQL的架构</h2><img src="/keepmoving/2020/04/14/%E9%87%8D%E5%9B%9E%E5%9F%BA%E7%A1%80%E4%B9%8BMySQL%E7%AC%94%E8%AE%B0%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AMySQL%E7%9A%84%E8%BF%90%E8%A1%8C%E6%96%B9%E5%BC%8F/1586876357383.jpg" class="" title="mysql客户端与服务端的连接方式">

<h2 id="MySQL的安装"><a href="#MySQL的安装" class="headerlink" title="MySQL的安装"></a>MySQL的安装</h2><ul>
<li>下载源代码自行编译安装</li>
<li>直接使用官方提供的安装包</li>
</ul>
<blockquote>
<p>windows或linux的安装请自行google</p>
</blockquote>
<h3 id="MySQL的安装目录"><a href="#MySQL的安装目录" class="headerlink" title="MySQL的安装目录"></a>MySQL的安装目录</h3><h4 id="bin目录"><a href="#bin目录" class="headerlink" title="bin目录"></a>bin目录</h4><p>bin目录一般都存放着安装程序的执行文件。</p>
<p>mysql服务器程序</p>
<ul>
<li><strong>mysqld</strong>：代表着<code>MySQL</code>服务器程序，运行这个可执行文件就可以直接启动一个服务器进程。</li>
<li><strong>mysqld_safe</strong>：启动脚本，间接的调用<code>mysqld</code>，还会启动一个监控进程，监控进程在服务器进程挂了的时候，可以帮助重启它。另外，它会将服务器程序的出错信息和其他诊断信息重定向到某个文件中，产生出错日志。</li>
<li><strong>mysql.server</strong>：启动脚本，它会间接的调用<code>mysqld_safe</code>，在调用<code>mysql.server</code>时在后边指定<code>start</code>参数就可以启动服务器程序。这个 <strong><em>mysql.server</em></strong> 文件其实是一个链接文件，它的实际文件是 <strong><em>../support-files/mysql.server</em></strong>。停止的话将<code>start</code>改为<code>stop</code>.</li>
<li><strong>mysql_multi</strong>：运行多个<code>MySQL</code>服务器进程。可以对每一个服务器进程的启动或停止进行监控。</li>
</ul>
<p>mysql客户端程序</p>
<p>启动客户端程序可使用 <strong>mysql</strong> , <strong>mysqladmin</strong> ，<strong>mysqldump</strong> ,<strong>mysqlcheck</strong>等等命令。</p>
<ul>
<li><strong>mysql</strong>：通过这个可执行文件可以让我们和服务器程序进程交互，也就是发送请求，接收服务器的处理结果。需要一些参数配合使用。例如 <code>mysql -h主机名  -u用户名 -p密码</code> 或 <code>mysql --host=主机名  --user=用户名 --password=密码</code></li>
</ul>
<h2 id="客户端与服务端的链接过程"><a href="#客户端与服务端的链接过程" class="headerlink" title="客户端与服务端的链接过程"></a>客户端与服务端的链接过程</h2><p>服务器程序和客户端程序都是计算机中的进程，所以两者之间的通信连接本质是两个进程间的通信。支持三种通信方式。</p>
<ul>
<li>TCP/IP</li>
<li>命名管道和共享内存(windows)</li>
<li>Unix域套接字文件</li>
</ul>
<h3 id="TCP-IP（相同主机或不同主机）"><a href="#TCP-IP（相同主机或不同主机）" class="headerlink" title="TCP/IP（相同主机或不同主机）"></a>TCP/IP（相同主机或不同主机）</h3><p><code>MySQL</code>采用<code>TCP</code>作为服务器和客户端之间的网络通信协议。网络中的两个进程可以通过<code>IP地址 + 端口号</code>的方式来连接，这样进程之间就可以通过网络进行通信。<code>MySQL</code>服务器启动的时候会默认申请<code>3306</code>端口号，之后就在这个端口号上等待客户端进程进行连接。若想自定义端口，则可通过启动时指定相关端口 <code>mysqld -p端口号</code>。于此同时客户端连接时也需要通过大写P <code>-P</code>来指定。</p>
<h3 id="Unix域套接字文件（相同主机）"><a href="#Unix域套接字文件（相同主机）" class="headerlink" title="Unix域套接字文件（相同主机）"></a>Unix域套接字文件（相同主机）</h3><p>服务器和客户端都运行在 <em>**同一台</em> **类unix的机器上，可在启动客户端程序时指定 <code>--protocol=socket</code> 启动参数，<code>MySQL</code>服务器程序默认监听的<code>Unix</code>域套接字文件路径为<code>/tmp/mysql.sock</code>，客户端程序也默认连接到这个<code>Unix</code>域套接字文件。若想改变默认的套接字文件，则可在启动服务端程序时通过指定 <code>socket</code>参数，<code>mysqld --socket=/tmp/a.txt</code>。同样，客户端也同样需要指定相同的套接字文件才可连接成功。</p>
<h2 id="服务器处理客户端请求"><a href="#服务器处理客户端请求" class="headerlink" title="服务器处理客户端请求"></a>服务器处理客户端请求</h2><p>服务器程序处理来自客户端的查询请求大致需要经过三个部分，分别是<code>连接管理</code>、<code>解析与优化</code>、<code>存储引擎</code>。</p>
<h3 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h3><p>客户端可通过以上几种方式与服务器链接，客户端与服务器建立连接时需要携带主机信息，用户名，密码进行认证，认证成功后获取当前账户的权限，认证失败则拒绝访问。每当有一个客户端进程连接到服务器进程时，服务器进程都会创建一个线程来专门处理与这个客户端的交互，当该客户端退出时会与服务器断开连接，服务器并不会立即把与该客户端交互的线程销毁掉，而是把它缓存起来，在另一个新的客户端再进行连接时，把这个缓存的线程分配给该新客户端。</p>
<h3 id="解析与优化"><a href="#解析与优化" class="headerlink" title="解析与优化"></a>解析与优化</h3><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>MySQL处理查询请求的过程，会将刚刚处理的查询请求缓存起来，若遇到相同的请求则会直接返回结果，查询缓存可以在不同客户端之间共享。</p>
<blockquote>
<p>如果两个查询请求在任何字符上的不同（例如：空格、注释、大小写），都会导致缓存不会命中或查询请求中包含某些系统函数（例如now函数每次获取的值也不一样）、用户自定义变量和函数、一些系统表如 mysql 、information_schema等同样也不会被缓存。</p>
</blockquote>
<p><strong>缓存失效频繁的原因</strong>：如果对缓存结果中的表进行<strong><em>结构或数据的变更</em></strong>都会导致缓存失效并删除。</p>
<blockquote>
<p>从MySQL 5.7.20开始，不推荐使用查询缓存，并在MySQL 8.0中删除。因为查询缓存有时可以提高性能，但不得不维护缓存而造成的开销。</p>
</blockquote>
<p>MySQL提供了这种“按需使用”的方式：可以将参数 <code>query_cache_type</code> 设置成 <code>DEMAND</code>，这样对于默认的 SQL 语句都不使用查询缓存。对于确定使用缓存的语句使用 <code>SQL_CACHE</code>进行显示指定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select SQL_CACHE * from T where ID &#x3D; 1；</span></pre></td></tr></table></figure>

<h4 id="语法解析"><a href="#语法解析" class="headerlink" title="语法解析"></a>语法解析</h4><p>若没有命中缓存，客户端发送过来的请求，<code>MySQL</code>服务器首先要对请求文本进行词法分析，语法分析等操作确保sql语句是正确的。</p>
<ul>
<li><strong>词法分析</strong>：MySQL 需要识别出里面的请求文本字符串分别是什么，代表什么。</li>
<li><strong>语法分析</strong>：根据语法规则判断你sql语句是否满足MySQL的语法。</li>
</ul>
<h4 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h4><p>经过语法解析之后，mysql能够确定sql具体是要做什么的。<code>MySQL</code>的优化程序会对我们的语句做一些优化，如外连接转换为内连接、表达式简化、子查询转为连接等等。<strong>优化的结果就是生成一个执行计划</strong>，这个执行计划表明了应该使用哪些索引进行查询，表之间的连接顺序是啥样的。可使用 <code>explain</code>语句来查看某个语句的执行计划。</p>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>经过了查询优化之后，只需按照生成的执行计划调用底层存储引擎提供的API，获取到数据后返回给客户端就好了。</p>
<blockquote>
<p><code>MySQL</code>服务器把数据的存储和提取操作都封装到了一个叫<code>存储引擎</code>的模块。<code>MySQL</code>提供了各式各样的<code>存储引擎</code>，不同<code>存储引擎</code>管理的表具体的存储结构可能不同，采用的存取算法也可能不同。常见的存储引擎：mysiam，innodb，memory等。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL把<code>连接管理</code>、<code>查询缓存</code>、<code>语法解析</code>、<code>查询优化</code>这些并不涉及真实数据存储的功能划分为<code>MySQL server</code>的功能，把真实存取数据的功能划分为<code>存储引擎</code>的功能。各种不同的存储引擎向上边的<code>MySQL server</code>层提供统一的调用接口（也就是存储引擎API）。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="">极客时间 mysql45讲</a></p>
<p><a href="">掘金 mysql小册子</a></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>back to basics</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins</title>
    <url>/keepmoving/2020/02/14/Jenkins/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>Jenkins是一款开源 CI&amp;CD 软件，用于<strong>自动化</strong>各种任务，包括<strong>构建</strong>、<strong>测试</strong>和<strong>部署软件</strong>。 Jenkins 支持各种运行方式，可通过<strong>系统包</strong>、<strong>Docker</strong> 或者通过一个<strong>独立的 Java 程序</strong>。 </p>
<p>Jenkins使开发者从繁杂的集成中解脱出来，专注于更为重要的业务逻辑实现上。同时 Jenkins 能实施监控集成中存在的错误，提供详细的日志文件和提醒功能，还能用图表的形式形象地展示项目构建的趋势和稳定性。</p>
</blockquote>
<a id="more"></a>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul>
<li>jenkins是java开发的，启动后是一个单点进程，提供一个WEB页面进行可视化操作。</li>
<li>数据它直接维护在本地磁盘上，所以不需要配置数据库。</li>
<li>它直接网络对接GIT或者SVN这种版本管理，进行代码的更新检测以及下载。</li>
<li>当它检测到代码提交后，会直接在进程内完成代码的更新，并执行用户自定义的一系列CI流程。</li>
<li>CI流程是用户通过一个特殊格式的配置文件Jenkins file定义的，每个项目可以只定义一个Jenkins file，或者为项目下的每个分支分别定义不同的Jenkinsfile，从而实现不同的CI流程。</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>  Jenkins通常作为一个独立的应用程序在其自己的流程中运行， 内置<a href="https://stackoverflow.com/questions/7213541/what-is-java-servlet" target="_blank" rel="noopener">Java servlet</a> 容器/应用程序服务器（<a href="http://www.eclipse.org/jetty/" target="_blank" rel="noopener">Jetty</a>）。  Jenkins也可以运行在不同的Java servlet容器(（如<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat</a> 或 <a href="https://javaee.github.io/glassfish/" target="_blank" rel="noopener">GlassFish</a>）)中作为servlet运行。</p>
</blockquote>
<ul>
<li>软件环境<ul>
<li>Java 8—无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。</li>
</ul>
</li>
</ul>
<p>Jenkins可安装在多个平台下，如Docker，Windows，IOS，Linux，此处介绍安装在Linux的方式，其他请移步→<a href="https://jenkins.io/zh/doc/book/installing/" target="_blank" rel="noopener">Jenkins安装文档</a>。</p>
<p>在Linux下安装建议通过yum方式安装。</p>
<ul>
<li>yum的repository中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum的repository。 </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span></pre></td></tr></table></figure>

<ul>
<li>安装Jenkins</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install jenkins.rpm</span></pre></td></tr></table></figure>

<ul>
<li>启动Jenkins</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service jenkins start</span></pre></td></tr></table></figure>

<ul>
<li>访问Jenkins（默认端口8080)</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://ip:8080</span></span></pre></td></tr></table></figure>

<ul>
<li>登录Jenkins</li>
</ul>
<p>初始密码可在启动的logs下查看或在该路径下<code>/var/lib/jenkins/secrets/initialAdminPassword</code>查看。</p>
<ul>
<li>默认配置</li>
</ul>
<p>默认配置存储在<code>/etc/sysconfig/jenkins</code></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h3><ul>
<li>git（ 可通过Jenkins下载或自安装（推荐））<ul>
<li>用途：从服务器拉取代码</li>
</ul>
</li>
<li>maven（ 可通过Jenkins下载或自安装（推荐））<ul>
<li>用途：构建项目</li>
</ul>
</li>
</ul>
<p><strong>控制面板 ** – **Manage Jenkins</strong> – <strong>Global Tool Configuration</strong></p>
<p>进入对应配置项会看到三个配置项，分别是maven，jdk，git</p>
<p>需要填写以下配置</p>
<ul>
<li>JDK<ul>
<li>name：标识</li>
<li>JAVA_HOME：/usr/local/jdk</li>
</ul>
</li>
<li>Git<ul>
<li>name：标识</li>
<li>Path to Git executable：/usr/bin/git</li>
</ul>
</li>
<li>Maven<ul>
<li>Name：标识</li>
<li>MAVEN_HOME：/usr/share/apache-maven</li>
</ul>
</li>
</ul>
<h3 id="配置LDAP服务认证"><a href="#配置LDAP服务认证" class="headerlink" title="配置LDAP服务认证"></a>配置LDAP服务认证</h3><p><strong>系统管理-管理插件-下载Active Directory plugin</strong></p>
<p>系统管理-全局安全设置勾选安全， 访问控制中选择Active Directory，按需配置 点击test domain若出现success即成功。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用Maven构建Java应用"><a href="#使用Maven构建Java应用" class="headerlink" title="使用Maven构建Java应用"></a>使用Maven构建Java应用</h3><p>Jenkins可以构建各类应用，这里以用Maven构建Java应用为例。</p>
<p><strong>控制面板</strong> – <strong>新建item</strong> – <strong>构建一个maven项目</strong> – <strong>填写项目名称</strong> – <strong>确定</strong></p>
<blockquote>
<p>Tips：此处若没有构建一个maven项目需要下载一个插件： Maven Integration plugin 。</p>
</blockquote>
<p>进入配置页，主要就是配置项目的源码，构建，部署等操作。（自定义）</p>
<p>最上方的标签卡出现General，源码管理，构建触发器，构建环境，PreStep，Build，PostSteps，构建设置，构建后操作 选项卡。</p>
<p><strong>此处仅做基本配置，自定义化的配置则按需配置。</strong></p>
<ul>
<li><p>General</p>
</li>
<li><p>描述：对整个项目的配置</p>
</li>
<li><p>源码管理</p>
<ul>
<li><p>Git</p>
<ul>
<li>Repositories<ul>
<li>Repositories URL：项目路径（ssh://git@xxx.git）</li>
<li>Credentials：选择链接到仓库的凭证 </li>
</ul>
</li>
<li>Branches to build<ul>
<li>指定分支：*/develop</li>
</ul>
</li>
</ul>
<blockquote>
<p>Tips：</p>
<ul>
<li>此处的Credentials为需要在服务器上生成ssh key，</li>
<li>将Jenkins所在的服务器的公钥配置到对应的仓库下，回到 <strong>控制面板</strong> – <strong>凭据</strong> – <strong>系统</strong> – <strong>全局凭据</strong> –  <strong>添加凭据</strong> – <strong>选择SSH Username With private Key</strong> ，在Private Key下 输入私钥 ID可不填 会自动生成。UserName 和描述 作为标识。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>Build</p>
<ul>
<li>Root POM ：指定根据哪个pom进行构建</li>
<li>Goals and options：执行的maven命令</li>
</ul>
<blockquote>
<p>构建好的项目存储在 <strong>/var/lib/jenkins/workspace</strong> 路径下，在该路径下可以看到项目相关代码</p>
</blockquote>
</li>
<li><p>Post Steps</p>
<ul>
<li><p>选择根据哪种构建结果执行后续步骤</p>
<ul>
<li>Run only if build succeeds</li>
<li>Run only if build succeeds or is unstable </li>
<li>Run regardless of build result </li>
</ul>
</li>
<li><p>Add post-build step：选择添加何种方式执行构建后的操作</p>
<ul>
<li>此处选择 <strong>Send files or execute commands over SSH</strong><ul>
<li>Name：选择具体添加的远程服务器</li>
<li>Transfers<ul>
<li>Source file：源文件（<strong>此处填写相对路径</strong>）</li>
<li>Remove prefixx：相对路径下除了项目的前缀</li>
<li>Remote directory：远程服务器路径</li>
<li>Exec command ：执行的shell命令</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Tips：1. 若没有Send file or execute commands over SSH 则需要下载插件 PUBLISH OVER SSH</p>
<p>2.此处选择的远程服务器需要在配置中进行配置 。 <strong>控制面板</strong> – <strong>ConfigSystem</strong> –  <strong>Publish over SSH</strong>   ，输入相关的SSH配置 勾选 <strong>Use password authentication, or use a different key</strong>。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>全部配置完毕之后回到 <strong>控制面板</strong>，就可以看到你配置好的项目，点击最后的一个图标进行构建，此时会在左下角出现一个进度条，点击#数字 可进入构建日志，再点击控制台输出 可查看到具体的日志。</p>
<p>Tomcat 脚本示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">export</span></pre></td></tr><tr><td class="code"><pre><span class="line">DATE=`date +%m%d%H%M`</span></pre></td></tr><tr><td class="code"><pre><span class="line">PROJECT='projectname'</span></pre></td></tr><tr><td class="code"><pre><span class="line">TOMCAT_HOME='/a/b/apache-tomcat-8.5.35'</span></pre></td></tr><tr><td class="code"><pre><span class="line">WEBAPPS='webapps'</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> the project</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo '停止服务'</span></pre></td></tr><tr><td class="code"><pre><span class="line">pid=`ps -ef | grep $&#123;TOMCAT_HOME&#125;| grep -v grep | awk '&#123;print $2&#125;'`</span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -n "$pid" ] </span></pre></td></tr><tr><td class="code"><pre><span class="line">	then kill -9 $pid </span></pre></td></tr><tr><td class="code"><pre><span class="line">else </span></pre></td></tr><tr><td class="code"><pre><span class="line">	echo '服务未运行'	</span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> backup war and zip </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo '备份webapp下的压缩包'</span></pre></td></tr><tr><td class="code"><pre><span class="line">echo $&#123;TOMCAT_HOME&#125;/$&#123;WEBAPPS&#125;/$&#123;PROJECT&#125;_$&#123;DATE&#125;.zip</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -q 表示不输出详细信息 -r表示递归处理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">zip -q -r $&#123;TOMCAT_HOME&#125;/$&#123;WEBAPPS&#125;/$&#123;PROJECT&#125;_$&#123;DATE&#125;.zip  $&#123;TOMCAT_HOME&#125;/$&#123;WEBAPPS&#125;/$&#123;PROJECT&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm -rf $&#123;TOMCAT_HOME&#125;/$&#123;WEBAPPS&#125;/$&#123;PROJECT&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">unzip the new project</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo '解压新的war包'</span></pre></td></tr><tr><td class="code"><pre><span class="line">unzip $&#123;TOMCAT_HOME&#125;/$&#123;PROJECT&#125;.war -d $&#123;TOMCAT_HOME&#125;/$&#123;WEBAPPS&#125;/$&#123;PROJECT&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">start</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo '启动新WAR包'</span></pre></td></tr><tr><td class="code"><pre><span class="line">sh $&#123;TOMCAT_HOME&#125;/bin/startup.sh</span></pre></td></tr></table></figure>

<p>SpringBoot 脚本示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将应用停止 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">stop.sh <span class="comment">#!/bin/bash </span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "Stopping SpringBoot Application" </span></pre></td></tr><tr><td class="code"><pre><span class="line">pid=` ps -ef | grep project | grep -v grep | awk '&#123;print $2&#125;'` </span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -n "$pid" ] </span></pre></td></tr><tr><td class="code"><pre><span class="line">	then kill -9 $pid </span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">backup.sh 用于将上次构建的结果备份 <span class="comment">#!/bin/bash </span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先判断文件是否存在，如果存在，则备份 </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">file="/usr/remotejenkins/xxx-0.0.1-SNAPSHOT.jar" </span></pre></td></tr><tr><td class="code"><pre><span class="line">if [ -f "$file" ] </span></pre></td></tr><tr><td class="code"><pre><span class="line">	then cp /usr/remotejenkins/xx-0.0.1-SNAPSHOT.jar /usr/backupjenkins/xx.-0.0.1-SNAPSHOT.jar.`date +%Y%m%d%H%M%S` </span></pre></td></tr><tr><td class="code"><pre><span class="line">fi</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">startup.sh 启动项目 <span class="comment">#!/bin/sh </span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "授予当前用户权限" chmod 777 /usr/remotejenkins/xx.-0.0.1-SNAPSHOT.jar </span></pre></td></tr><tr><td class="code"><pre><span class="line">echo "执行....." </span></pre></td></tr><tr><td class="code"><pre><span class="line">java -jar /usr/remotejenkins/xx.-0.0.1-SNAPSHOT.jar</span></pre></td></tr></table></figure>

<h3 id="集成SonarQube"><a href="#集成SonarQube" class="headerlink" title="集成SonarQube"></a>集成SonarQube</h3><p>jenkins与sonar集成有两种方式，</p>
<ul>
<li>一种是在Post Steps过程中使用SonarQube Scanner分析；</li>
<li>二是在构建后操作中使用SonarQube analysis with Maven，相当于调用了maven的插件与sonar集成。</li>
</ul>
<h4 id="SonarQube-Scanner分析"><a href="#SonarQube-Scanner分析" class="headerlink" title="SonarQube Scanner分析"></a>SonarQube Scanner分析</h4><ol>
<li>点击左侧导航栏的系统管理 - 全局工具设置中的SonarQube Scanner，按需配置</li>
<li>回到任务列表，点击配置进入任务配置 找到标签中的Post Steps。点击Add post-build step。选择 Execute SonarQube Scanner。<ul>
<li>task to run ：scan （分析代码）</li>
<li>JDK 选择框：选择 SonarQube Scanner 使用的 JDK（注意这里必须是 JDK 不能是 JRE）</li>
<li>Path to project properties ：可选择的输入框，这里可以指定一个 sonar-project.properties 文件，如果不指定的话会使用项目默认的 properties 文件</li>
<li>Analysis properties ：输入一些配置参数用来传递给 SonarQube，这里的参数优先级高于 sonar-project.properties 文件里面的参数，所以可以在这里来配置所有的参数以替代 sonar-project.properties 文件</li>
<li>sonar.language：指定了要分析的开发语言（特定的开发语言对应了特定的规则）</li>
<li>sonar.sources：定义了需要分析的源代码位置</li>
<li>sonar.java.binarie：定义了需要分析代码的编译后 class 文件位置</li>
<li>Additional arguments：-X 是进入 SonarQube Scanner 的 Debug 模式</li>
<li>JVM Options：可以输入在执行 SonarQube Scanner 需要的 JVM 参数</li>
</ul>
</li>
</ol>
<h4 id="Maven插件与Sonar集成"><a href="#Maven插件与Sonar集成" class="headerlink" title="Maven插件与Sonar集成"></a>Maven插件与Sonar集成</h4><p>回到任务列表，点击配置进入任务配置 找到标签中的构建后操作。选择SonarQube analysis with Maven即可。</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>安全测试-API设计</title>
    <url>/keepmoving/2018/12/17/%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95-API%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>最近编写的项目进行了安全测试,为了保证接口API的安全性因此增加了API验签和API防重放。验签保证了请求数据的一致性；防重放则保证了请求数据的时效性。</p>
</blockquote>
<a id="more"></a>

<h2 id="api验签"><a href="#api验签" class="headerlink" title="api验签"></a>api验签</h2><pre><code>为了防止api参数被篡改,需要对请求参数进行签名。这样可以保证数据的一致性.具体做法如下:</code></pre><ol>
<li>首先与客户端进行加密规则的约定,客户端按照约定好的加密规则及秘钥将参数进行加密,得到签名值clientSign,并且将签名放在请求头或请求体中,发送请求给服务端.</li>
<li>服务端获取到请求参数,通过约定好的秘钥和加密规则进行加密(除了签名值),获取到服务端加密的签名值ServerSign.</li>
<li>服务端将加密的签名值ServerSign与客户端传过来的签名值clientSign进行对比,若相同则表示签名没有被篡改,若不同则表示签名被篡改. </li>
</ol>
<blockquote>
<p><strong>因为拦截者不清楚秘钥及加密规则所以即使获取到了请求参数并修改了参数值也无法生成正确的签名值。</strong></p>
</blockquote>
<hr>
<h2 id="api防重放攻击"><a href="#api防重放攻击" class="headerlink" title="api防重放攻击"></a>api防重放攻击</h2><ul>
<li>基于时间戳<ul>
<li>每次请求都会在header上添加一个时间戳的键值对,通过对时间戳与当前时间戳的比较,若两者相差时间大于了预设的时间间隔即为非法请求,一般设置60s。</li>
<li>缺点：若在60s之内就进行了重放攻击,则请求不能保证唯一性。</li>
</ul>
</li>
<li>基于随机字符串<ul>
<li>每次请求都会在header上添加一个字符串的键值对,每次请求过后将字符串存储到服务端上(缓存或数据库)。当请求进来时,先在服务端进行检查该字符串是否已存在,若存在则是非法请求。</li>
<li>缺点：大量的请求会造成服务端存储的压力,验证字符串在服务端的耗时也成正比增长。若存储在服务端上的缓存中,可通过设置过期时间来减少压力。若存储在服务端上的数据库中,可通过定时任务来减少压力。</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>随机字符串的一次性可解决时间戳的60s问题,时间戳可以解决随机字符串服务端压力的问题。时间戳 + 字符串 就可以只存储60s之内的随机字符串。</strong><br>参考资料：<a href="http://www.cnblogs.com/xiaochangwei/p/api.html" target="_blank" rel="noopener">API接口设计：防参数篡改+防二次请求</a></p>
</blockquote>
<hr>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="request中流对象的重复获取"><a href="#request中流对象的重复获取" class="headerlink" title="request中流对象的重复获取"></a>request中流对象的重复获取</h3><h4 id="问题描述及分析"><a href="#问题描述及分析" class="headerlink" title="问题描述及分析"></a>问题描述及分析</h4><pre><code>前端传输数据格式为JSON,HttpServletRequest中获取JSON数据格式通过流来获取的。但是流的获取只能获取一次,在拦截器中获取之后,在Conroller层就无法进行绑定参数。</code></pre><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>自定义一个类继承HttpServletRequestWrapper类,重写getInputStream方法,可以重复获取流,并且在Filter中将原本的HttpServletRequest替换为包装后的流对象,这样在拦截器中获取之后controller层也可以获取。</li>
<li>代码示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyHttpServletRequestWrapper extends HttpServletRequestWrapper &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	private static Logger logger &#x3D; LoggerFactory.getLogger(MyHttpServletRequestWrapper.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final byte[] body;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	final static int BUFFER_SIZE &#x3D; 4096;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public MyHttpServletRequestWrapper(HttpServletRequest request) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		super(request);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F;读取输入流</span></pre></td></tr><tr><td class="code"><pre><span class="line">		body &#x3D; cloneInputStream(request.getInputStream());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	@Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public BufferedReader getReader() throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#x2F;&#x2F; TODO Auto-generated method stub</span></pre></td></tr><tr><td class="code"><pre><span class="line">		return new BufferedReader(new InputStreamReader(getInputStream()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	@Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public ServletInputStream getInputStream() throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		final ByteArrayInputStream bais &#x3D; new ByteArrayInputStream(body);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		return new ServletInputStream() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public int read() throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return bais.read();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public boolean isFinished() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public boolean isReady() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void setReadListener(ReadListener readListener) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 * 获取输入流</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 * @param servletInputStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 * @return</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public byte[] cloneInputStream(ServletInputStream servletInputStream)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		ByteArrayOutputStream byteArrayOutputStream &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		byte[] buffer &#x3D; new byte[BUFFER_SIZE];</span></pre></td></tr><tr><td class="code"><pre><span class="line">		int len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">		try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">			byteArrayOutputStream &#x3D; new ByteArrayOutputStream();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			while((len &#x3D; servletInputStream.read(buffer)) &gt; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				byteArrayOutputStream.write(buffer,0,len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			byteArrayOutputStream.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">			</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			logger.error(&quot;cloneInputStream exception: &quot; + e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			if(byteArrayOutputStream !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					byteArrayOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">					logger.error(&quot;cloneInputStream close exception: &quot; + e.getMessage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">				</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return byteArrayOutputStream.toByteArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>参考资料： <a href="https://blog.csdn.net/cstdiohao/article/details/78085288" target="_blank" rel="noopener">继承HttpServletRequestWrapper 实现request中流的重复获取</a></p>
</blockquote>
<h3 id="自定义拦截器中无法获取配置文件的值"><a href="#自定义拦截器中无法获取配置文件的值" class="headerlink" title="自定义拦截器中无法获取配置文件的值"></a>自定义拦截器中无法获取配置文件的值</h3><h4 id="问题描述及分析-1"><a href="#问题描述及分析-1" class="headerlink" title="问题描述及分析"></a>问题描述及分析</h4><pre><code>拦截器中需要获取配置文件中的值,但是通过@Value属性无法注入该值。拦截器是基于springmvc,本事并没有被spring管理,所以要将自定义的拦截器注入spring,这样方便获取spirng context上下文中的值。</code></pre><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ul>
<li>使用 <strong>@Bean</strong>注解将拦截器注入到Spring,这样拦截器才可以获取Spring中的值  </li>
<li>代码实例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@EnableWebMvc</span></pre></td></tr><tr><td class="code"><pre><span class="line">@Configuration</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SpringMVCConfig extends WebMvcConfigurerAdapter &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	@Bean</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public MyInteceptor myInterceptor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    return new MyInteceptor();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	@Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">	public void addInterceptors(InterceptorRegistry registry) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    registry.addInterceptor(myInterceptor());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<blockquote>
<p>参考资料： <a href="https://blog.csdn.net/qq_34244429/article/details/79784412" target="_blank" rel="noopener">springboot拦截器提取@Value属性值时为空的解决方案</a></p>
</blockquote>
</li>
</ul>
<hr>
<h2 id="涉及知识点"><a href="#涉及知识点" class="headerlink" title="涉及知识点"></a>涉及知识点</h2><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><blockquote>
<p>​    </p>
</blockquote>
<h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a>拦截器和过滤器的区别</h3><blockquote>
<p>参考资料： <a href="http://einverne.github.io/post/2017/08/spring-interceptor-vs-filter.html" target="_blank" rel="noopener">Spring Interceptor vs Filter 拦截器和过滤器区别</a><br>参考资料： <a href="https://juejin.im/post/5ba3bdae6fb9a05cfc54d16d" target="_blank" rel="noopener">springboot系列文章之过滤器 vs 拦截器</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>问题收录</title>
    <url>/keepmoving/2018/12/13/%E9%97%AE%E9%A2%98%E6%94%B6%E5%BD%95/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>此文章记录工作中及学习中遇到的问题。</p>
</blockquote>
<a id="more"></a>

<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li>问题：如何在本地初始化项目并推送至远程仓库？ </li>
</ul>
<blockquote>
<p><a href="https://segmentfault.com/a/1190000009491296" target="_blank" rel="noopener">将本地项目推送到远程git新仓库</a></p>
</blockquote>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul>
<li>问题：文件流 file.mkdir 和 mkdirs的区别？</li>
</ul>
<blockquote>
<p>java.io.File.mkdir()：只能创建一级目录，且父目录必须存在，否则无法成功创建一个目录</p>
<p>java.io.File.mkdirs()：可以创建多级目录，父目录不一定存在。</p>
</blockquote>
<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><ul>
<li>问题：springboot如何集成多套MQ？</li>
</ul>
<blockquote>
<p> <a href="https://blog.csdn.net/qq_37608766/article/details/80912370" target="_blank" rel="noopener">Spring Boot配置多个RabbitMQ</a></p>
</blockquote>
<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><ul>
<li>问题：@Transactional注解失效的情况及原因</li>
</ul>
<blockquote>
<ol>
<li>在代理模式（默认设置）下，只拦截通过代理进入的外部方法调用。这意味着自调用（实际上，目标对象中的方法调用目标对象的另一个方法）在运行时不会导致实际的事务，即使调用的方法被标记<code>@Transactional</code>。</li>
<li>使用代理时，应仅将<code>@Transactional</code>注释应用于具有公共可见性的方法。如果使用注释 注释protected，private或package-visible方法，则<code>@Transactional</code>不会引发错误，但带注释的方法不会显示已配置的事务设置。</li>
</ol>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction-declarative-annotations" target="_blank" rel="noopener">spring官方文档</a></p>
<p>原因：<a href="https://www.jb51.net/article/137255.htm" target="_blank" rel="noopener">SPRING AOP 原理</a></p>
</blockquote>
<h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><ul>
<li>问题：CommandLineRunner和ApplicationRunner接口的区别</li>
</ul>
<blockquote>
<ol>
<li>ApplicationRunner 默认优先于 CommandLineRunner执行</li>
<li>可以使用@Order指定执行顺序 1&gt;2&gt;3</li>
<li>CommandLineRunner的参数是最原始的参数，没有做任何处理；ApplicationRunner的参数是ApplicationArguments，是对原始参数做了进一步的封装</li>
<li>CommandLineRunner、ApplicationRunner 接口是在容器启动成功后的最后一步回调（类似开机自启动）。</li>
</ol>
<p><a href="https://www.jianshu.com/p/5d4ffe267596" target="_blank" rel="noopener">CommandLineRunner或者ApplicationRunner接口</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Nexus</title>
    <url>/keepmoving/2018/12/03/Nexus/</url>
    <content><![CDATA[<h2 id="两图介绍"><a href="#两图介绍" class="headerlink" title="两图介绍"></a>两图介绍</h2><img src="/keepmoving/2018/12/03/Nexus/23101707_yGi4.png" class="" title="不存在nexus的情况">

<img src="/keepmoving/2018/12/03/Nexus/23101708_45ox.png" class="" title="存在nexus的情况">

<a id="more"></a>

<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>节省网络资源，速度快</li>
<li>便于管理，加速项目搭建进程</li>
<li>共享内部开发的公共构件</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><p>软件环境</p>
<ul>
<li>JDK</li>
</ul>
</li>
<li><p>官网获取nexus最新版本 <a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a></p>
</li>
<li><p>解压下载的文件夹</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvzf nexus-3.13.0-01-mac.tgz</span></pre></td></tr></table></figure>

<blockquote>
<p>sonatype-work为nexus的工作目录，日志文件也在其中</p>
</blockquote>
<ul>
<li>启动nexus</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /nexus-3.13.0-01/bin/</span></pre></td></tr><tr><td class="code"><pre><span class="line">./nexus start</span></pre></td></tr></table></figure>

<ul>
<li>访问nexus</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://服务器ip地址:8081</span></span></pre></td></tr></table></figure>

<blockquote>
<p>8081为默认端口号  默认账号：admin 默认密码：admin123</p>
</blockquote>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>登陆之后左边导航栏显示</p>
<ul>
<li><p>Search：类似Maven仓库上的搜索功能，就是从私服上查找是否有这些包。支持模糊查询。</p>
</li>
<li><p>Upload：第三方jar包上传（nexus的web界面）</p>
</li>
<li><p>Support：包含日志及数据分析</p>
</li>
<li><p>Respository</p>
<ul>
<li>blob stores：可查看文件存储 创建一个目录的话，对应文件系统的一个目录，可供仓库上传文件使用</li>
<li>repositories：查看仓库管理<ul>
<li>maven-central：maven（Java）中央库，默认从 <strong><a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a></strong>  拉取jar 可修改</li>
<li>maven-releases：私库发行版jar</li>
<li>maven-snapshots：私库快照（调试版本）jar</li>
<li>maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地maven基础配置 settings.xml中使用。</li>
<li>nuget.org-proxy：nuget（.Net）中央库，默认从 <strong><a href="https://www.nuget.org/api/v2/" target="_blank" rel="noopener">https://www.nuget.org/api/v2/</a></strong> 拉取  可修改</li>
</ul>
</li>
</ul>
<blockquote>
<p>仓库类型</p>
<ul>
<li><p>proxy 代理仓库：代理公共的远程仓库</p>
</li>
<li><p>hosted 宿主仓库：主要用于部署无法从公共仓库获取的构件（如 oracle 的 JDBC 驱动）以及自己或第三方的项目构件</p>
</li>
<li><p>group 仓库组：Nexus 通过仓库组的概念统一管理多个仓库，这样我们在项目中直接请求仓库组即可请求到仓库组管理的多个仓库</p>
<img src="/keepmoving/2018/12/03/Nexus/23101709_msGh.png" class="" title="仓库类型">
</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="使用Maven私服"><a href="#使用Maven私服" class="headerlink" title="使用Maven私服"></a>使用Maven私服</h4><ul>
<li>全局配置下载依赖（即项目pom无需配置）</li>
</ul>
<ol>
<li>在maven的setting.xml 文件中配置私服配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>myrepconf<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">         </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--私有库地址--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">&lt;!-- 可在nexus管理界面获取--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--插件库地址--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">&lt;!-- 可在nexus管理界面获取--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span></pre></td></tr></table></figure>

<ol start="2">
<li>激活上方配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--激活profile--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>myrepconf<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span></pre></td></tr></table></figure>

<ol start="3">
<li>指定镜像代理为我们的私服</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-myself<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--*指的是访问任何仓库都使用我们的私服--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus myself<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span></pre></td></tr></table></figure>

<ul>
<li>单独项目下载依赖(即项目pom文件中配置)</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!-- 可在nexus管理界面获取--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">           <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></pre></td></tr></table></figure>

<h4 id="上传jar包到Maven私服"><a href="#上传jar包到Maven私服" class="headerlink" title="上传jar包到Maven私服"></a>上传jar包到Maven私服</h4><p>如果要发布自己的jar包到私服，就需要修改工程的pom.xml</p>
<ul>
<li><p>自己开发的jar包</p>
<ol>
<li>maven的setting.xml文件配置(<strong>这里配置的username和password 就是登陆web端nexus的账号密码</strong>)</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>username<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span></pre></td></tr></table></figure>

<ol start="2">
<li>pom.xml文件配置如下（<strong>这里的id为setting.xml文件中配置server标签的一致</strong>）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://服务器ip地址:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span></pre></td></tr></table></figure>

<ol start="3">
<li>执行maven的deploy命令 上传到Nexus （若version不含有SNAPSHOT 则会上传到releases库中，若添加则上传到snapshots库中。/ release仓库默认不支持重复发布）</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx-xxx-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>第三方jar包（使用web端的upload功能）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>nexus</tag>
      </tags>
  </entry>
  <entry>
    <title>压力测试中遇到的问题</title>
    <url>/keepmoving/2018/11/27/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><blockquote>
<p>压力测试流程准备及过程中碰到的问题。</p>
</blockquote>
<a id="more"></a>

<h3 id="压测环境准备"><a href="#压测环境准备" class="headerlink" title="压测环境准备"></a>压测环境准备</h3><blockquote>
<p>服务器配置：4C16G centos7 </p>
</blockquote>
<h4 id="服务端压测准备"><a href="#服务端压测准备" class="headerlink" title="服务端压测准备"></a>服务端压测准备</h4><ul>
<li>安装 JDK8<blockquote>
<p>参考链接:<a href="https://blog.csdn.net/qq_25881261/article/details/79698252" target="_blank" rel="noopener">CentOS7下安装JDK详细过程</a></p>
</blockquote>
<h4 id="数据库压测准备"><a href="#数据库压测准备" class="headerlink" title="数据库压测准备"></a>数据库压测准备</h4></li>
<li>安装mysql<blockquote>
<p>参考链接:<a href="https://blog.csdn.net/lihao21/article/details/80692068" target="_blank" rel="noopener">CentOS 7 安装 MySQL</a></p>
</blockquote>
</li>
</ul>
<hr>
<h3 id="压测中遇到的问题"><a href="#压测中遇到的问题" class="headerlink" title="压测中遇到的问题"></a>压测中遇到的问题</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><blockquote>
<ul>
<li>现象: <strong>POST请求的测试过程中,当多个链接对同一张表的数据进行持续更新操作,执行速度越来越慢,直至出现锁表 .日志显示 数据库出现LOCK WAIT 最终导致QPS低</strong></li>
<li>分析: <strong>MySQL的innodb存储引擎支持行级锁，innodb的行锁是通过给索引项加锁实现的，这就意味着只有通过索引条件检索数据时，innodb才使用行锁，否则使用表锁。</strong></li>
<li>解决：<strong>在相应的更新语句上添加相应的字段索引</strong></li>
</ul>
</blockquote>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><blockquote>
<ul>
<li>现象: <strong>Mysql分页语句 sql查询耗时与起始页数成正比</strong></li>
<li>分析: <strong>根据explain sql的结果来看,虽然使用了索引但是扫描的行数还是较大</strong></li>
<li>解决: <strong>优化sql 采用INNER JOIN优化 先在子查询当中获取所需数据的id,然后直接关联获取结果</strong></li>
</ul>
</blockquote>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><blockquote>
<ul>
<li>现象: <strong>Mysql count语句 sql查询耗时与记录数成正比</strong></li>
<li>分析: <strong>MyISAM存储引擎下,会将表的记录数保存在索引中,innodb存储引擎下并没有将该信息存储在索引中</strong></li>
<li>解决: <strong>不要每次都请求总记录数，这样真的会很慢，对其做缓存，显示大概的数量，用户不会在乎小的误差的</strong></li>
</ul>
</blockquote>
<h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><blockquote>
<ul>
<li>现象：<strong>get请求中服务端CPU过高,数据库CPU正常</strong></li>
<li>分析：<strong>在服务器上查看了java进程的gc次数，发现FGC次数过多,查看程序代码发现在for循环中去new HashMap,并发提高的同时,java进程不断在进行GC</strong></li>
<li>解决：<strong>将HashMap换成实体类且在for循环外先申请引用,在循环内进行实例化(申请空间),节省栈内存的空间</strong></li>
</ul>
</blockquote>
<hr>
<h3 id="补充收录"><a href="#补充收录" class="headerlink" title="补充收录"></a>补充收录</h3><h4 id="理解explain-sql语句"><a href="#理解explain-sql语句" class="headerlink" title="理解explain sql语句"></a>理解explain sql语句</h4><blockquote>
<p>参考链接:<a href="https://www.cnblogs.com/xuanzhi201111/p/4175635.html" target="_blank" rel="noopener">MySQL Explain详解</a></p>
</blockquote>
<h4 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h4><blockquote>
<p>单一索引是指索引列为一列的情况,即新建索引的语句只实施在一列上。 用户可以在多个列上建立索引，这种索引叫做复合索引(组合索引)。复合索引的创建方法与创建单一索引的方法完全一样。但复合索引在数据库操作期间所需的开销更小，可以代替多个单一索引。当表的行数远远大于索引键的数目时，使用这种方式可以明显加快表的查询速度。同时有两个概念叫做窄索引和宽索引，窄索引是指索引列为1-2列的索引,如果不特殊说明的话一般是指单一索引。宽索引也就是索引列超过2列的索引。<strong>设计索引的一个重要原则就是能用窄索引不用宽索引，因为窄索引往往比组合索引更有效</strong>。拥有更多的窄索引，将给优化程序提供更多的选择余地，这通常有助于提高性能。</p>
</blockquote>
<hr>
<blockquote>
<p>KEY a_b_c (a, b, c)     //创建a,b,c的复合索引</p>
<ul>
<li>索引可能会对ORDER起作用:<ul>
<li>ORDER BY a</li>
<li>ORDER BY a,b</li>
<li>ORDER BY a, b, c</li>
<li>ORDER BY a DESC, b DESC, c DESC</li>
</ul>
</li>
<li>索引对WHERE和ORDER都起作用：<ul>
<li>WHERE a = const ORDER BY b, c</li>
<li>WHERE a = const AND b = const ORDER BY c</li>
<li>WHERE a = const ORDER BY b, c </li>
<li>WHERE a = const AND b &gt; const ORDER BY b, c</li>
</ul>
</li>
<li>索引在ORDER失效:<ul>
<li>ORDER BY a ASC, b DESC, c DESC /* 混合的ORDER方向 */ </li>
<li>WHERE g = const ORDER BY b, c /* 前面的字段缺失 */ </li>
<li>WHERE a = const ORDER BY c /* b缺失 */</li>
<li>WHERE a = const ORDER BY a, d /* d 不在索引中 */</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>optimization</tag>
      </tags>
  </entry>
</search>
